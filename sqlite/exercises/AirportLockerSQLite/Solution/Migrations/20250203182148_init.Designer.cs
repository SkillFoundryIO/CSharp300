// <auto-generated />
using System;
using AirportLockerSQLite.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirportLockerSQLite.Migrations
{
    [DbContext(typeof(LockerDbContext))]
    [Migration("20250203182148_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("AirportLockerSQLite.Entities.Rental", b =>
                {
                    b.Property<int>("LockerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("LockerNumber");

                    b.HasIndex("UserID");

                    b.ToTable("Rentals", (string)null);
                });

            modelBuilder.Entity("AirportLockerSQLite.Entities.RentalHistory", b =>
                {
                    b.Property<int>("RentalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LockerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("RentalID");

                    b.HasIndex("UserID");

                    b.ToTable("RentalHistory", (string)null);
                });

            modelBuilder.Entity("AirportLockerSQLite.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AirportLockerSQLite.Entities.Rental", b =>
                {
                    b.HasOne("AirportLockerSQLite.Entities.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirportLockerSQLite.Entities.RentalHistory", b =>
                {
                    b.HasOne("AirportLockerSQLite.Entities.User", "User")
                        .WithMany("RentalHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirportLockerSQLite.Entities.User", b =>
                {
                    b.Navigation("RentalHistory");

                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
